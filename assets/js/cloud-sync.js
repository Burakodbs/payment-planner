// GitHub Gist Cloud Sync Extension
class GistCloudSync {
    constructor() {
        this.gistId = null; // ƒ∞lk kurulumda olu≈üturulacak
        this.githubToken = null; // GitHub Personal Access Token
        this.syncInterval = 5 * 60 * 1000; // 5 dakikada bir sync
        this.lastSyncTime = 0;
    }

    // GitHub token'ƒ± ayarla (bir kez yapƒ±lƒ±r)
    setGitHubToken(token) {
        this.githubToken = token;
        localStorage.setItem('github_token', token);
        console.log('‚úÖ GitHub token ayarlandƒ±');
    }

    // Gist ID'yi ayarla (ilk upload'tan sonra)
    setGistId(gistId) {
        this.gistId = gistId;
        localStorage.setItem('gist_id', gistId);
        console.log('‚úÖ Gist ID ayarlandƒ±:', gistId);
    }

    // Ayarlarƒ± y√ºkle
    loadSettings() {
        this.githubToken = localStorage.getItem('github_token');
        this.gistId = localStorage.getItem('gist_id');
        this.lastSyncTime = parseInt(localStorage.getItem('last_sync_time') || '0');
    }

    // Verileri cloud'a g√∂nder
    async uploadToGist(userData) {
        if (!this.githubToken) {
            console.warn('GitHub token ayarlanmamƒ±≈ü');
            return false;
        }

        const gistData = {
            description: `Payment Planner Data - ${new Date().toISOString()}`,
            public: false, // Private gist
            files: {
                "payment-data.json": {
                    content: JSON.stringify(userData, null, 2)
                },
                "last-updated.txt": {
                    content: new Date().toISOString()
                }
            }
        };

        try {
            let url = 'https://api.github.com/gists';
            let method = 'POST';

            // Eƒüer gist ID varsa update et
            if (this.gistId) {
                url = `https://api.github.com/gists/${this.gistId}`;
                method = 'PATCH';
            }

            const response = await fetch(url, {
                method: method,
                headers: {
                    'Authorization': `token ${this.githubToken}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(gistData)
            });

            if (response.ok) {
                const result = await response.json();
                
                // ƒ∞lk upload ise gist ID'yi kaydet
                if (!this.gistId) {
                    this.setGistId(result.id);
                }

                this.lastSyncTime = Date.now();
                localStorage.setItem('last_sync_time', this.lastSyncTime.toString());
                
                console.log('‚òÅÔ∏è Veriler cloud\'a y√ºklendi:', new Date().toLocaleTimeString());
                this.showSyncStatus('Cloud\'a y√ºklendi', 'success');
                return true;
            } else {
                throw new Error(`GitHub API Error: ${response.status}`);
            }

        } catch (error) {
            console.error('Cloud upload hatasƒ±:', error);
            this.showSyncStatus('Upload hatasƒ±', 'error');
            return false;
        }
    }

    // Cloud'dan verileri indir
    async downloadFromGist() {
        if (!this.gistId || !this.githubToken) {
            console.warn('Gist bilgileri eksik');
            return null;
        }

        try {
            const response = await fetch(`https://api.github.com/gists/${this.gistId}`, {
                headers: {
                    'Authorization': `token ${this.githubToken}`
                }
            });

            if (response.ok) {
                const gist = await response.json();
                const fileContent = gist.files['payment-data.json'].content;
                const userData = JSON.parse(fileContent);
                
                console.log('‚òÅÔ∏è Veriler cloud\'dan indirildi:', new Date().toLocaleTimeString());
                this.showSyncStatus('Cloud\'dan indirildi', 'success');
                return userData;
            } else {
                throw new Error(`Gist download error: ${response.status}`);
            }

        } catch (error) {
            console.error('Cloud download hatasƒ±:', error);
            this.showSyncStatus('Download hatasƒ±', 'error');
            return null;
        }
    }

    // Otomatik senkronizasyon ba≈ülat
    startAutoSync() {
        // Sayfa y√ºklendiƒüinde cloud'dan kontrol et
        this.checkForCloudUpdates();

        // Periyodik olarak upload et
        setInterval(async () => {
            if (window.fileStorage && window.fileStorage.pendingSave) {
                await this.syncToCloud();
            }
        }, this.syncInterval);

        console.log('üîÑ Otomatik cloud sync ba≈ülatƒ±ldƒ± (5 dakika)');
    }

    // Cloud g√ºncellemelerini kontrol et
    async checkForCloudUpdates() {
        const cloudData = await this.downloadFromGist();
        if (cloudData && window.fileStorage) {
            // Cloud'daki tarih ile local'i kar≈üƒ±la≈ütƒ±r
            const cloudDate = new Date(cloudData.lastUpdated).getTime();
            const localDate = this.lastSyncTime;

            if (cloudDate > localDate) {
                const confirmSync = confirm('‚òÅÔ∏è Cloud\'da daha g√ºncel veriler bulundu. ƒ∞ndirmek istiyor musunuz?');
                if (confirmSync) {
                    window.fileStorage.applyUserData(cloudData);
                    await window.fileStorage.saveUserData();
                    this.showSyncStatus('Cloud\'dan senkronize edildi', 'success');
                }
            }
        }
    }

    // Manuel cloud sync
    async syncToCloud() {
        if (!window.fileStorage || !window.fileStorage.currentUser) {
            return false;
        }

        // Mevcut veriyi al
        const userData = {
            username: window.fileStorage.currentUser,
            lastUpdated: new Date().toISOString(),
            expenses: expenses || [],
            regularPayments: regularPayments || [],
            creditCards: creditCards || [],
            people: people || [],
            settings: {
                theme: 'light'
            }
        };

        return await this.uploadToGist(userData);
    }

    // Sync durumu g√∂ster
    showSyncStatus(message, type) {
        // Mevcut save status div'i kullan
        if (window.fileStorage) {
            window.fileStorage.showSaveStatus(`‚òÅÔ∏è ${message}`, type);
        } else {
            console.log(`‚òÅÔ∏è ${message}`);
        }
    }

    // Setup assistant - ilk kurulum i√ßin
    async setupWizard() {
        const setupMessage = `üîß GITHUB GIST CLOUD SYNC KURULUMU

Bu √∂zellik verilerinizi otomatik olarak GitHub Gist'e yedekler.
B√∂ylece her cihazdan g√ºncel verilerinize eri≈üebilirsiniz.

Kurulum adƒ±mlarƒ±:
1. GitHub.com'da Personal Access Token olu≈üturun
2. Token'ƒ± a≈üaƒüƒ±daki alana girin
3. ƒ∞lk sync otomatik olarak yapƒ±lƒ±r

GitHub Token olu≈üturmak i√ßin:
github.com ‚Üí Settings ‚Üí Developer settings ‚Üí Personal access tokens ‚Üí Generate new token
‚úÖ 'gist' permission'ƒ±nƒ± se√ßin

Token'ƒ±nƒ±zƒ± girin:`;

        const token = prompt(setupMessage);
        if (token) {
            this.setGitHubToken(token);
            
            // ƒ∞lk sync'i yap
            const success = await this.syncToCloud();
            if (success) {
                alert('‚úÖ Cloud sync kurulumu tamamlandƒ±!\nVerileriniz otomatik olarak senkronize edilecek.');
                this.startAutoSync();
            } else {
                alert('‚ùå Kurulum hatasƒ±. Token\'ƒ± kontrol edin.');
            }
        }
    }
}

// Global instance
const gistSync = new GistCloudSync();

// Sayfa y√ºklendiƒüinde ba≈ülat
document.addEventListener('DOMContentLoaded', function() {
    gistSync.loadSettings();
    
    // Eƒüer token varsa otomatik sync ba≈ülat
    if (gistSync.githubToken) {
        setTimeout(() => gistSync.startAutoSync(), 2000);
    }
});

// FileStorage ile entegre et
if (window.fileStorage) {
    const originalSave = window.fileStorage.saveUserData;
    window.fileStorage.saveUserData = async function() {
        // Normal kaydet
        const result = await originalSave.call(this);
        
        // Cloud'a da g√∂nder (5 dakika sonra)
        setTimeout(() => {
            if (gistSync.githubToken) {
                gistSync.syncToCloud();
            }
        }, 5000);
        
        return result;
    };
}

// Global eri≈üim
window.GistCloudSync = GistCloudSync;
window.gistSync = gistSync;
